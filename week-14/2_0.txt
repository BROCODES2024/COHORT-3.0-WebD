slides: https://projects.100xdevs.com/tracks/6SbPPXGkG8QKFOTW9BmL/ts-8

Step 3 - The tsc compiler
Let’s bootstrap a simple Typescript Node.js application locally on our machines
 
Step 1 - Install tsc/typescript globally
npm install -g typescript

Step 2 - Initialize an empty Node.js project with typescript
mkdir node-app
cd node-app
npm init -y
npx tsc --init
These commands should initialize two files in your project

Step 3 - Create a a.ts file
const x: number = 1;
console.log(x);

Step 4 - Compile the ts file to js file
tsc -b

Step 5 - Explore the newly generated index.js file
Notice how there is no typescript code in the javascript file. It’s a plain old js file with no types
 
Step 6 - Try assigning x to a string
Make sure you convert the const to let
let x: number = 1;
x = "harkirat"
console.log(x);

Step 7 - Delete a.js

Step 8 - Try compiling the code again
tsc -b
Notice all the errors you see in the console. This tells you there are type errors in your codebase.
Also notice that no index.js is created anymore
This is the high level benefit of typescript. It lets you catch type errors at compile time